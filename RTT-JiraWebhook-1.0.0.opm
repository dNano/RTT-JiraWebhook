<?xml version="1.0" encoding="utf-8" ?>
<otrs_package version="1.1">
    <Name>RTT-JiraWebhook</Name>
    <Version>1.0.0</Version>
    <Vendor>Realtime Technology AG</Vendor>
    <URL>http://rtt.ag/</URL>
    <License>GNU AFFERO GENERAL PUBLIC LICENSE Version 3, November 2007</License>
    <Description Lang="en">Integrates Jira-Webhooks into OTRS</Description>
    <Description Lang="de">Integriert Jira-Webhooks in OTRS</Description>
    <Framework>3.2.x</Framework>
    <CodeInstall Type="post">

        # Add new State &quot;wait JIRA&quot;
        use Kernel::System::State;
        use Kernel::System::DynamicField;
        use Data::Dumper;

        $Self-&gt;{StateObject} = Kernel::System::State-&gt;new(
            ConfigObject =&gt; $Self-&gt;{ConfigObject},
            LogObject    =&gt; $Self-&gt;{LogObject},
            DBObject     =&gt; $Self-&gt;{DBObject},
            MainObject   =&gt; $Self-&gt;{MainObject},
            EncodeObject =&gt; $Self-&gt;{EncodeObject},
        );

        $Self-&gt;{StateObject}-&gt;StateAdd(
            Name    =&gt; 'wait JIRA',
            Comment =&gt; 'Tickets that wait for a JIRA-Update to occur',
            ValidID =&gt; 1,
            TypeID  =&gt; 3,
            UserID  =&gt; 1,
        );

        # Add Dynamic Fields
        $Self-&gt;{DynamicFieldObject} = Kernel::System::DynamicField-&gt;new( %{$Self} );
        my @dynamicfields = (
            {
                'Name' =&gt; 'JiraKey',
                'Label' =&gt; 'Jira-ID',
                'Type' =&gt; 'Text',
            },
            {
                'Name' =&gt; 'JiraSummary',
                'Label' =&gt; 'summary',
                'Type'  =&gt; 'Text',
            },
            {
                'Name' =&gt; 'JiraStatus',
                'Label' =&gt; 'Jira Status',
                'Type'  =&gt; 'IconText',
            },
            {
                'Name' =&gt; 'JiraIssueType',
                'Label' =&gt; 'Issue Type',
                'Type' =&gt; 'IconText',
            },
            {
                'Name'  =&gt; 'JiraPriority',
                'Label' =&gt; 'Priority',
                'Type' =&gt; 'IconText',
            },
            {
                'Name' =&gt; 'JiraAssignee',
                'Label' =&gt; 'Assignee',
                'Type' =&gt; 'IconText',
            },
            {
                'Name' =&gt; 'JiraLastChanged',
                'Label' =&gt; 'Last Changed',
                'Type' =&gt; 'DateTime',
            },
        );

        my $presentfields = scalar @{$Self-&gt;{DynamicFieldObject}-&gt;DynamicFieldList()};

        my $i = 1;
        for my $field (@dynamicfields) {
            my $FieldID = $Self-&gt;{DynamicFieldObject}-&gt;DynamicFieldAdd(
                Name       =&gt; $field-&gt;{'Name'},
                Label      =&gt; $field-&gt;{'Label'},
                FieldOrder =&gt; $presentfields + $i,
                FieldType  =&gt; $field-&gt;{'Type'},
                ObjectType =&gt; 'Ticket',
                Config     =&gt; { DefaultValue =&gt; '' },
                ValidID    =&gt; 1,
                UserID     =&gt; 1,
                );
                $i++;
        }
    </CodeInstall>
    <BuildDate>2013-11-22 16:07:25</BuildDate>
    <BuildHost>pstest.rtt.ag</BuildHost>
    <Filelist>
        <File Location="Kernel/Config/Files/RTT-JiraWebhook.xml" Permission="644" Encode="Base64">PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iaXNvLTg4NTktMSIgPz4KPG90cnNfY29uZmlnIHZlcnNpb249IjEuMCIgaW5pdD0iQXBwbGljYXRpb24iPgo8IS0tIHdhaXQgSmlyYS1CdXR0b24gLS0+CiAgICA8Q29uZmlnSXRlbSBOYW1lPSJUaWNrZXQ6OkZyb250ZW5kOjpNZW51TW9kdWxlIyMjOTUxLXdhaXRKaXJhIiBSZXF1aXJlZD0iMCIgVmFsaWQ9IjEiPgogICAgICAgIDxEZXNjcmlwdGlvbiBUcmFuc2xhdGFibGU9IjEiPlNob3dzIGEgbGluayBpbiB0aGUgem9vbSB2aWV3IG9mIHRoZSBhZ2VudCBpbnRlcmZhY2UgdG8gcHV0IGEgdGlja2V0IGJhY2sgdG8gc2xlZXAuPC9EZXNjcmlwdGlvbj4KICAgICAgICA8R3JvdXA+UlRULUppcmFXZWJob29rPC9Hcm91cD4KICAgICAgICA8U3ViR3JvdXA+RnJvbnRlbmQ6OkFnZW50OjpUaWNrZXQ6Ok1lbnVNb2R1bGU8L1N1Ykdyb3VwPgogICAgICAgIDxTZXR0aW5nPgogICAgICAgICAgICA8SGFzaD4KICAgICAgICAgICAgICAgIDxJdGVtIEtleT0iTW9kdWxlIj5LZXJuZWw6Ok91dHB1dDo6SFRNTDo6VGlja2V0TWVudUdlbmVyaWM8L0l0ZW0+CiAgICAgICAgICAgICAgICA8SXRlbSBLZXk9Ik5hbWUiPndhaXQgSmlyYTwvSXRlbT4KICAgICAgICAgICAgICAgIDxJdGVtIEtleT0iRGVzY3JpcHRpb24iIFRyYW5zbGF0YWJsZT0iMSI+V2FpdCBmb3IgbmV4dCBKaXJhLVVwZGF0ZTwvSXRlbT4KICAgICAgICAgICAgICAgIDxJdGVtIEtleT0iQWN0aW9uIj5BZ2VudFRpY2tldFJUVHdhaXRKaXJhPC9JdGVtPgogICAgICAgICAgICAgICAgPEl0ZW0gS2V5PSJMaW5rIj5BY3Rpb249QWdlbnRUaWNrZXRSVFR3YWl0SmlyYTtUaWNrZXRJRD0kUURhdGF7IlRpY2tldElEIn08L0l0ZW0+CiAgICAgICAgICAgICAgICA8SXRlbSBLZXk9IlRhcmdldCI+PC9JdGVtPgogICAgICAgICAgICAgICAgPEl0ZW0gS2V5PSJQb3B1cFR5cGUiPjwvSXRlbT4KICAgICAgICAgICAgPC9IYXNoPgogICAgICAgIDwvU2V0dGluZz4KICAgIDwvQ29uZmlnSXRlbT4KICAgIDxDb25maWdJdGVtIE5hbWU9IlRpY2tldDo6RnJvbnRlbmQ6OlByZU1lbnVNb2R1bGUjIyM5NTEtd2FpdEppcmEiIFJlcXVpcmVkPSIwIiBWYWxpZD0iMSI+CiAgICAgICAgPERlc2NyaXB0aW9uIFRyYW5zbGF0YWJsZT0iMSI+U2hvd3MgYSBsaW5rIGluIGV2ZXJ5IHRpY2tldC12aWV3IG9mIHRoZSBhZ2VudCBpbnRlcmZhY2UgdG8gcHV0IGEgdGlja2V0IGJhY2sgdG8gc2xlZXAuPC9EZXNjcmlwdGlvbj4KICAgICAgICA8R3JvdXA+UlRULUppcmFXZWJob29rPC9Hcm91cD4KICAgICAgICA8U3ViR3JvdXA+RnJvbnRlbmQ6OkFnZW50OjpUaWNrZXQ6Ok1lbnVNb2R1bGVQcmU8L1N1Ykdyb3VwPgogICAgICAgIDxTZXR0aW5nPgogICAgICAgICAgICA8SGFzaD4KICAgICAgICAgICAgICAgIDxJdGVtIEtleT0iTW9kdWxlIj5LZXJuZWw6Ok91dHB1dDo6SFRNTDo6VGlja2V0TWVudUdlbmVyaWM8L0l0ZW0+CiAgICAgICAgICAgICAgICA8SXRlbSBLZXk9Ik5hbWUiPndhaXQgSmlyYTwvSXRlbT4KICAgICAgICAgICAgICAgIDxJdGVtIEtleT0iQWN0aW9uIj5BZ2VudFRpY2tldFJUVHdhaXRKaXJhPC9JdGVtPgogICAgICAgICAgICAgICAgPEl0ZW0gS2V5PSJEZXNjcmlwdGlvbiIgVHJhbnNsYXRhYmxlPSIxIj5XYWl0IGZvciBuZXh0IEppcmEtVXBkYXRlPC9JdGVtPgogICAgICAgICAgICAgICAgPEl0ZW0gS2V5PSJMaW5rIj5BY3Rpb249QWdlbnRUaWNrZXRSVFR3YWl0SmlyYTtUaWNrZXRJRD0kUURhdGF7IlRpY2tldElEIn08L0l0ZW0+CiAgICAgICAgICAgICAgICA8SXRlbSBLZXk9IlRhcmdldCI+PC9JdGVtPgogICAgICAgICAgICAgICAgPEl0ZW0gS2V5PSJQb3B1cFR5cGUiPjwvSXRlbT4KICAgICAgICAgICAgPC9IYXNoPgogICAgICAgIDwvU2V0dGluZz4KICAgIDwvQ29uZmlnSXRlbT4KICAgIDxDb25maWdJdGVtIE5hbWU9IlJUVDo6SmlyYVdlYmhvb2s6OndhaXRTdGF0ZSIgUmVxdWlyZWQ9IjEiIFZhbGlkPSIxIj4KICAgICAgICA8RGVzY3JpcHRpb24gVHJhbnNsYXRhYmxlPSIxIj5EZWZpbmVzIHRoZSB3YWl0aW5nLXN0YXRlIHRvIHNldC48L0Rlc2NyaXB0aW9uPgogICAgICAgIDxHcm91cD5SVFQtSmlyYVdlYmhvb2s8L0dyb3VwPgogICAgICAgIDxTdWJHcm91cD5Db3JlPC9TdWJHcm91cD4KICAgICAgICA8U2V0dGluZz4KICAgICAgICAgICAgPFN0cmluZyBSZWdleD0iIj53YWl0IEpJUkE8L1N0cmluZz4KICAgICAgICA8L1NldHRpbmc+CiAgICA8L0NvbmZpZ0l0ZW0+CiAgICA8Q29uZmlnSXRlbSBOYW1lPSJGcm9udGVuZDo6TW9kdWxlIyMjQWdlbnRUaWNrZXRSVFR3YWl0SmlyYSIgUmVxdWlyZWQ9IjEiIFZhbGlkPSIxIj4KICAgICAgICA8RGVzY3JpcHRpb24gVHJhbnNsYXRhYmxlPSIxIj5Gcm9udGVuZCBtb2R1bGUgcmVnaXN0cmF0aW9uIGZvciB0aGUgYWdlbnQgaW50ZXJmYWNlLjwvRGVzY3JpcHRpb24+CiAgICAgICAgPEdyb3VwPlJUVC1KaXJhV2ViaG9vazwvR3JvdXA+CiAgICAgICAgPFN1Ykdyb3VwPkZyb250ZW5kOjpBZ2VudDo6TW9kdWxlUmVnaXN0cmF0aW9uPC9TdWJHcm91cD4KICAgICAgICA8U2V0dGluZz4KICAgICAgICAgICAgPEZyb250ZW5kTW9kdWxlUmVnPgogICAgICAgICAgICAgICAgPERlc2NyaXB0aW9uPndhaXQgSmlyYTwvRGVzY3JpcHRpb24+CiAgICAgICAgICAgICAgICA8VGl0bGU+d2FpdCBDbG9zZTwvVGl0bGU+CiAgICAgICAgICAgICAgICA8TmF2QmFyTmFtZT5UaWNrZXQ8L05hdkJhck5hbWU+CiAgICAgICAgICAgIDwvRnJvbnRlbmRNb2R1bGVSZWc+CiAgICAgICAgPC9TZXR0aW5nPgogICAgPC9Db25maWdJdGVtPgoJCjwhLS0gSWNvbitUZXh0IER5bmFtaWNGaWVsZCBCYWNrZW5kIC0tPgogICAgPENvbmZpZ0l0ZW0gTmFtZT0iRHluYW1pY0ZpZWxkczo6QmFja2VuZCMjI0ljb25UZXh0IiBSZXF1aXJlZD0iMSIgVmFsaWQ9IjEiPgogICAgICAgIDxEZXNjcmlwdGlvbiBUcmFuc2xhdGFibGU9IjEiPlJlZ2lzdHJhdGlvbiBvZiB0aGUgSWNvblRleHQtRHluYW1pY0ZpZWxkLXR5cGUuPC9EZXNjcmlwdGlvbj4KICAgICAgICA8R3JvdXA+UlRULUppcmFXZWJob29rPC9Hcm91cD4KICAgICAgICA8U3ViR3JvdXA+RHluYW1pY0ZpZWxkczo6QmFja2VuZDo6UmVnaXN0cmF0aW9uPC9TdWJHcm91cD4KICAgICAgICA8U2V0dGluZz4KICAgICAgICAgICAgPEhhc2g+CiAgICAgICAgICAgICAgICA8SXRlbSBLZXk9IkNvbmZpZ0RpYWxvZyI+QWRtaW5EeW5hbWljRmllbGRUZXh0PC9JdGVtPgoJCQkJPEl0ZW0gS2V5PSJEaXNwbGF5TmFtZSI+SWNvbitUZXh0PC9JdGVtPgoJCQkJPEl0ZW0gS2V5PSJNb2R1bGUiPktlcm5lbDo6U3lzdGVtOjpEeW5hbWljRmllbGQ6OkJhY2tlbmQ6Okljb25UZXh0PC9JdGVtPgogICAgICAgICAgICA8L0hhc2g+CiAgICAgICAgPC9TZXR0aW5nPgogICAgPC9Db25maWdJdGVtPgoKPCEtLSBEeW5hbWljRmllbGQgRGlzcGxheXMgLS0+CiAgICA8Q29uZmlnSXRlbSBOYW1lPSJUaWNrZXQ6OkZyb250ZW5kOjpBZ2VudFRpY2tldEZyZWVUZXh0IyMjRHluYW1pY0ZpZWxkIiBSZXF1aXJlZD0iMCIgVmFsaWQ9IjEiPgogICAgICAgIDxEZXNjcmlwdGlvbiBUcmFuc2xhdGFibGU9IjEiPlNob3dpbmcgdGhlIEppcmEtRHluYW1pY0ZpZWxkcyBpbiB0aGUgZnJlZSB0ZXh0IHNjcmVlbi48L0Rlc2NyaXB0aW9uPgogICAgICAgIDxHcm91cD5SVFQtSmlyYVdlYmhvb2s8L0dyb3VwPgogICAgICAgIDxTdWJHcm91cD5Gcm9udGVuZDo6QWdlbnQ6OlRpY2tldDo6Vmlld0ZyZWVUZXh0PC9TdWJHcm91cD4KICAgICAgICA8U2V0dGluZz4KICAgICAgICAgICAgPEhhc2g+CiAgICAgICAgICAgICAgICA8SXRlbSBLZXk9IkppcmFLZXkiPjE8L0l0ZW0+CgkJCQk8SXRlbSBLZXk9IkppcmFTdW1tYXJ5Ij4xPC9JdGVtPgoJCQkJPEl0ZW0gS2V5PSJKaXJhU3RhdHVzIj4xPC9JdGVtPgoJCQkJPEl0ZW0gS2V5PSJKaXJhSXNzdWVUeXBlIj4xPC9JdGVtPgoJCQkJPEl0ZW0gS2V5PSJKaXJhUHJpb3JpdHkiPjE8L0l0ZW0+CgkJCQk8SXRlbSBLZXk9IkppcmFBc3NpZ25lZSI+MTwvSXRlbT4KCQkJCTxJdGVtIEtleT0iSmlyYUxhc3RDaGFuZ2VkIj4xPC9JdGVtPgogICAgICAgICAgICA8L0hhc2g+CiAgICAgICAgPC9TZXR0aW5nPgogICAgPC9Db25maWdJdGVtPgogICAgPENvbmZpZ0l0ZW0gTmFtZT0iVGlja2V0OjpGcm9udGVuZDo6QWdlbnRUaWNrZXRab29tIyMjRHluYW1pY0ZpZWxkIiBSZXF1aXJlZD0iMCIgVmFsaWQ9IjEiPgogICAgICAgIDxEZXNjcmlwdGlvbiBUcmFuc2xhdGFibGU9IjEiPlNob3dpbmcgdGhlIEppcmEtRHluYW1pY0ZpZWxkcyBpbiB0aGUgc2lkZWJhciBvZiB0aGUgdGlja2V0IHpvb20gc2NyZWVuLjwvRGVzY3JpcHRpb24+CiAgICAgICAgPEdyb3VwPlJUVC1KaXJhV2ViaG9vazwvR3JvdXA+CiAgICAgICAgPFN1Ykdyb3VwPkZyb250ZW5kOjpBZ2VudDo6VGlja2V0OjpWaWV3Wm9vbTwvU3ViR3JvdXA+CiAgICAgICAgPFNldHRpbmc+CiAgICAgICAgICAgIDxIYXNoPgogICAgICAgICAgICAgICAgPEl0ZW0gS2V5PSJKaXJhS2V5Ij4xPC9JdGVtPgoJCQkJPEl0ZW0gS2V5PSJKaXJhU3VtbWFyeSI+MTwvSXRlbT4KCQkJCTxJdGVtIEtleT0iSmlyYVN0YXR1cyI+MTwvSXRlbT4KCQkJCTxJdGVtIEtleT0iSmlyYUlzc3VlVHlwZSI+MTwvSXRlbT4KCQkJCTxJdGVtIEtleT0iSmlyYVByaW9yaXR5Ij4xPC9JdGVtPgoJCQkJPEl0ZW0gS2V5PSJKaXJhQXNzaWduZWUiPjE8L0l0ZW0+CgkJCQk8SXRlbSBLZXk9IkppcmFMYXN0Q2hhbmdlZCI+MTwvSXRlbT4KICAgICAgICAgICAgPC9IYXNoPgogICAgICAgIDwvU2V0dGluZz4KICAgIDwvQ29uZmlnSXRlbT4KCjwhLS0gV2ViaG9vay1Db25maWcgLS0+CiAgICA8Q29uZmlnSXRlbSBOYW1lPSJSVFQ6OkppcmFXZWJob29rOjpKaXJhVXJsIiBSZXF1aXJlZD0iMSIgVmFsaWQ9IjEiPgogICAgICAgIDxEZXNjcmlwdGlvbiBUcmFuc2xhdGFibGU9IjEiPlVSTCBvZiBKSVJBIChpbmNsdWRpbmcgdHJhaWxpbmcgc2xhc2gpLjwvRGVzY3JpcHRpb24+CiAgICAgICAgPEdyb3VwPlJUVC1KaXJhV2ViaG9vazwvR3JvdXA+CiAgICAgICAgPFN1Ykdyb3VwPkNvcmU8L1N1Ykdyb3VwPgogICAgICAgIDxTZXR0aW5nPgogICAgICAgICAgICA8U3RyaW5nIFJlZ2V4PSIiPmh0dHA6Ly9qaTAxLnJ0dC5sb2NhbDo4MDgwLzwvU3RyaW5nPgogICAgICAgIDwvU2V0dGluZz4KICAgIDwvQ29uZmlnSXRlbT4KICAgIDxDb25maWdJdGVtIE5hbWU9IlJUVDo6SmlyYVdlYmhvb2s6OkppcmFVcGRhdGVkU3RhdGUiIFJlcXVpcmVkPSIxIiBWYWxpZD0iMSI+CiAgICAgICAgPERlc2NyaXB0aW9uIFRyYW5zbGF0YWJsZT0iMSI+U2V0IFRpY2tldCB0byB0aGlzIHN0YXRlIGlmIHRoZXJlIHdhcyBhIEppcmEtVXBkYXRlLjwvRGVzY3JpcHRpb24+CiAgICAgICAgPEdyb3VwPlJUVC1KaXJhV2ViaG9vazwvR3JvdXA+CiAgICAgICAgPFN1Ykdyb3VwPkNvcmU8L1N1Ykdyb3VwPgogICAgICAgIDxTZXR0aW5nPgogICAgICAgICAgICA8U3RyaW5nIFJlZ2V4PSIiPm9wZW48L1N0cmluZz4KICAgICAgICA8L1NldHRpbmc+CiAgICA8L0NvbmZpZ0l0ZW0+Cjwvb3Ryc19jb25maWc+</File>
        <File Location="Kernel/Modules/AgentTicketRTTwaitJira.pm" Permission="644" Encode="Base64">cGFja2FnZSBLZXJuZWw6Ok1vZHVsZXM6OkFnZW50VGlja2V0UlRUd2FpdEppcmE7Cgp1c2Ugc3RyaWN0Owp1c2Ugd2FybmluZ3M7CgpzdWIgbmV3IHsKICAgIG15ICggJFR5cGUsICVQYXJhbSApID0gQF87CgogICAgIyBhbGxvY2F0ZSBuZXcgaGFzaCBmb3Igb2JqZWN0CiAgICBteSAkU2VsZiA9IHslUGFyYW19OwogICAgYmxlc3MoICRTZWxmLCAkVHlwZSApOwoKICAgICMgY2hlY2sgbmVlZGVkIG9iamVjdHMKICAgIGZvciAocXcoUGFyYW1PYmplY3QgREJPYmplY3QgTGF5b3V0T2JqZWN0IExvZ09iamVjdCBDb25maWdPYmplY3QgUXVldWVPYmplY3QgVGltZU9iamVjdCBUaWNrZXRPYmplY3QpKSB7CiAgICAgICAgaWYgKCAhJFNlbGYtPnskX30gKSB7CiAgICAgICAgICAgICRTZWxmLT57TGF5b3V0T2JqZWN0fS0+RmF0YWxFcnJvciggTWVzc2FnZSA9PiAiR290IG5vICRfISIgKTsKICAgICAgICB9CiAgICB9CgogICAgcmV0dXJuICRTZWxmOwp9CgpzdWIgUnVuIHsKICAgIG15ICggJFNlbGYsICVQYXJhbSApID0gQF87CgogICAgIyBjaGVjayBuZWVkZWQgc3R1ZmYKICAgIGlmICggISRTZWxmLT57VGlja2V0SUR9ICkgewogICAgICAgIHJldHVybiAkU2VsZi0+e0xheW91dE9iamVjdH0tPkVycm9yU2NyZWVuKAogICAgICAgICAgICBNZXNzYWdlID0+ICdObyBUaWNrZXRJRCBpcyBnaXZlbiEnLAogICAgICAgICAgICBDb21tZW50ID0+ICdQbGVhc2UgY29udGFjdCB0aGUgYWRtaW4uJywKICAgICAgICApOwogICAgfQoKICAgICMgY2hlY2sgcGVybWlzc2lvbnMKICAgIG15ICRBY2Nlc3MgPSAkU2VsZi0+e1RpY2tldE9iamVjdH0tPlRpY2tldFBlcm1pc3Npb24oCiAgICAgICAgVHlwZSAgICAgPT4gJ2Nsb3NlJywKICAgICAgICBUaWNrZXRJRCA9PiAkU2VsZi0+e1RpY2tldElEfSwKICAgICAgICBVc2VySUQgICA9PiAkU2VsZi0+e1VzZXJJRH0KICAgICk7CgogICAgIyBlcnJvciBzY3JlZW4sIGRvbid0IHNob3cgdGlja2V0CiAgICBpZiAoICEkQWNjZXNzICkgewogICAgICAgIHJldHVybiAkU2VsZi0+e0xheW91dE9iamVjdH0tPk5vUGVybWlzc2lvbigKICAgICAgICAgICAgTWVzc2FnZSAgICA9PiAiWW91IG5lZWQgJFNlbGYtPntDb25maWd9LT57UGVybWlzc2lvbn0gcGVybWlzc2lvbnMhIiwKICAgICAgICAgICAgV2l0aEhlYWRlciA9PiAneWVzJywKICAgICAgICApOwogICAgfQoKICAgIG15ICRTdGF0ZSA9ICRTZWxmLT57Q29uZmlnT2JqZWN0fS0+R2V0KCdSVFQ6OkppcmFXZWJob29rOjp3YWl0U3RhdGUnKTsKICAgIGlmICgkU3RhdGUpIHsKICAgICAgICBteSAkU3VjY2VzcyA9ICRTZWxmLT57VGlja2V0T2JqZWN0fS0+VGlja2V0U3RhdGVTZXQoCiAgICAgICAgICAgIFN0YXRlICAgID0+ICRTdGF0ZSwKICAgICAgICAgICAgVGlja2V0SUQgPT4gJFNlbGYtPntUaWNrZXRJRH0sCiAgICAgICAgICAgIFVzZXJJRCAgID0+ICRTZWxmLT57VXNlcklEfSwKICAgICAgICApOwogICAgICAgIGlmICgkU3VjY2VzcykgewogICAgICAgICAgICAkU2VsZi0+e1RpY2tldE9iamVjdH0tPlRpY2tldExvY2tTZXQoCiAgICAgICAgICAgICAgICBUaWNrZXRJRCA9PiAkU2VsZi0+e1RpY2tldElEfSwKICAgICAgICAgICAgICAgIExvY2sgICAgID0+ICd1bmxvY2snLAogICAgICAgICAgICAgICAgVXNlcklEICAgPT4gJFNlbGYtPntVc2VySUR9LAogICAgICAgICAgICApOwogICAgICAgIH0KICAgIH0KICAgIHJldHVybiAkU2VsZi0+e0xheW91dE9iamVjdH0tPlJlZGlyZWN0KCBPUCA9PiAkU2VsZi0+e0xhc3RTY3JlZW5PdmVydmlld30gKTsKfQoxOwoK</File>
        <File Location="Kernel/System/DynamicField/Backend/IconText.pm" Permission="644" Encode="Base64"></File>
        <File Location="bin/cgi-bin/jira.pl" Permission="755" Encode="Base64"></File>
    </Filelist>
</otrs_package>